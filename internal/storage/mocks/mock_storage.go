// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/storage.go -destination=internal/storage/mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/parikshitg/urlshortener/internal/common"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CodeExists mocks base method.
func (m *MockStorage) CodeExists(code string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeExists", code)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CodeExists indicates an expected call of CodeExists.
func (mr *MockStorageMockRecorder) CodeExists(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeExists", reflect.TypeOf((*MockStorage)(nil).CodeExists), code)
}

// GetCode mocks base method.
func (m *MockStorage) GetCode(url string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStorageMockRecorder) GetCode(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockStorage)(nil).GetCode), url)
}

// GetURL mocks base method.
func (m *MockStorage) GetURL(code string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", code)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockStorageMockRecorder) GetURL(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockStorage)(nil).GetURL), code)
}

// Purge mocks base method.
func (m *MockStorage) Purge() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Purge")
}

// Purge indicates an expected call of Purge.
func (mr *MockStorageMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockStorage)(nil).Purge))
}

// Save mocks base method.
func (m *MockStorage) Save(url, code, domain string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", url, code, domain)
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(url, code, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), url, code, domain)
}

// TopDomains mocks base method.
func (m *MockStorage) TopDomains(n int) []common.TopN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopDomains", n)
	ret0, _ := ret[0].([]common.TopN)
	return ret0
}

// TopDomains indicates an expected call of TopDomains.
func (mr *MockStorageMockRecorder) TopDomains(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopDomains", reflect.TypeOf((*MockStorage)(nil).TopDomains), n)
}
